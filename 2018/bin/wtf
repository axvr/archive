#!/usr/bin/perl

# Public domain.
# 2018-05-28 â€“ 2018-06-14

# Whitespace & Text Fixer
# -----------------------
#
# Does these things:
# * Remove trailing and/or leading whitespace
# * Compress all lines into a single line
# * Convert tabs to spaces (and vice versa)
# * TODO Add missing new line characters at EOF
# * TODO Alignment (replace vim-lion)

use strict;
use warnings;
use Getopt::Std;
use File::Copy qw(copy move);


# Parameters:
# -t | remove trailing whitespace
# -l | remove leading whitespace
# -c | compress all lines into one
# -b | convert tabs to spaces
# -B | convert leading whitespace to tabs
# -f | force (e.g. when supplied with the '-B' option convert all spaces to tabs)
# -n | TODO add missing new line char to EOF
# -p | TODO list issues with file(s)
# -i | edit files in place (TODO add backup option, like in 'sed')
# -u | print usage information
# -h | TODO print help

our($opt_u, $opt_h, $opt_t, $opt_l, $opt_c, $opt_i, $opt_b, $opt_B, $opt_f);
getopts("utlcib:B:f");

if ($opt_u) {
    printf("usage: %s [-tlcufi] [file ...]\n", "$0");
    exit 1;
}

if ($opt_h) {
    print("Help me");
    exit 1;
}

# TODO reduce indentation levels
if (@ARGV) {
    foreach (@ARGV) {
        # Use file list
        my $file = $_;

        if (! -e -f -T $file) {
            print(STDERR "wtf: \"$file\" is not a valid file\n");
            next;
        }

        open(my $in, '<', "$file") or die "wtf: unable to read from \"$file\"";

        if ($opt_i) {
            # Write to file
            open(my $out, '>', "$file.wtf_tmp")
                or die "wtf: unable to write to \"$file\": $!";
            my $mode = (stat $file)[2];
            copy($file, "$file.wtf_tmp");
            while (<$in>) {
                main($_);
                print($out $_);
            }
            close($out);
            move("$file.wtf_tmp", $file);
            chmod($mode, $file);
        } else {
            while (<$in>) {
                main($_);
                print(STDOUT $_);
            }
        }
        close($in);
    }
} else {
    # Use pipeline
    while (<>) {
        main($_);
        print(STDOUT "$_");
    }
}

sub main {
    # Compress into a single line
    if ($opt_c) { s/\v+/ /; }
    # Trim trailing whitespace
    if ($opt_t) { s/\h+$//; }
    # Remove leading whitespace
    if ($opt_l) { s/^\h+//; }

    # Convert tabs to spaces
    if ($opt_b) { s/\t/' 'x$opt_b/ge; }
    # Replace spaces with tabs (only leading spaces unless forced)
    if ($opt_B && $opt_f) {
        s/ {$opt_B}/\t/g;
    } elsif ($opt_B) {
        s/^(\h*?)? {$opt_B}/$1\t/g; # FIXME
    }
}
